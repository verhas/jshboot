#
# This is a jamal.options file.
#
# Use this file to define the options for the Jamal executions started from JShell.
# When this file is generated by jamal.jsh it contains the default values.
# It is the same as having an empty jama.options file or not having that file at all in the current working directory.
#
# Syntax:
# 1.) Every line starting with a # character is a comment
# 2.) Empty lines are ignored
# 3.) syntax of an option line is "key value"
#     The key and the value are separated by one or more space
#     Spaces from the start and from the end of the key and the value are chopped off (trimmed)
# 4.) Option keys 'jar' and 'cp' can appear many times
# 5.) Other option keys can appear tero or one time
#
# Use 'jar' to define the URL of a jar file that needs to be on the classpath
# The script will download these to the './.jamal/cache/.jar/' directory and start jamal including these files into  the classpath
# Note that the extensions are not loaded by default
# If you want to use some extension macro then you have to uncomment this line
# jar https://github.com/verhas/jamal/blob/master/release-1.2.0/05extensions/jamal-extensions-1.2.0.jar?raw=true
#
# Use 'cp' to add local JAR files or directories to the classpath
# cp ./target/classes
# 'pattern' is a regular expression to select the files that are to be processed by Jamal
# only the files that have the pattern in their name will be processed
pattern .*\.jam$
# 'exclude' is a regular expression to exclude files from being processed
# files that have the pattern in their name will not be processed even if the 'pattern' matches
exclude

# 'to' and 'from' control hov the name of the output is calculated from the input
# when a file is processed the name of the file will be transformed using replaceAll(from,to)
# 'from' is a regular expression, 'to' is a string
# the default is to chop off the '.jam' extension from the end of the file name, so for example
# 'pom.xml.jam' will produce 'pom.xml'
to
from \.jam$

# 'open' and 'close' define the macro opening and closing strings
open {
close }

# 'source' defines the source directory
# the files in this directory and in the directories below it recursively will be processed
source .
# 'target' is the target directory. The output files will be created in this directory recreating the directory
# structure of the processed source files.
target .
